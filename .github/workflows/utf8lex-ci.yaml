name: Utf8lex Continuous Integration

permissions:
  contents: read
  packages: write

#
# Build (on push)
# - Compile utf8lex
# - Link into .so library
# - TODO Link into executable program
# - Upload .so, executable program to GitHub Packages
#
on:
  push: {}
  pull_request:
    types:
      - closed
      # TODO only on merge (requires if logic https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges)


jobs:
  # ====================================================================
  builder_container_image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/mips64le
          - linux/ppc64le
          - linux/s390x
    env:
      BUILD_DIR: ./build
      BUILDER_IMAGE_BASE: "utf8lex-builder"
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: matrix-platform-env
        name: Set a non-slashy MATRIX_PLATFORM environment variable
        run: |
          echo "MATRIX_PLATFORM=${{matrix.platform}}" \
              | sed 's|/|\.|g' \
              > $GITHUB_ENV

      #
      # https://docs.docker.com/build/ci/github-actions/cache/
      #
      - id: container-image-cache-restore
        name: Restore container image
        #
        # Never use actions/cache/restore:
        #
        #     https://github.com/orgs/community/discussions/27059#discussioncomment-10084333
        #
        uses: actions/cache@v4
        with:
          path: /tmp/builder/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz
          key: utf8lex-container-image-cache-${{ hashFiles('build.Dockerfile') }}

      # Add support for more platforms with QEMU
      # https://github.com/docker/setup-qemu-action
      - id: qemu-setup
        name: qemu for multi-platform docker support
        if: steps.container-image-cache-restore.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      - id: docker-buildx-setup
        name: Set up Docker Buildx
        if: steps.container-image-cache-restore.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v3

      #
      # Documentation:
      #     https://docs.docker.com/reference/cli/docker/buildx/build/
      #
      # Docker does not support loading multi-platform images from files (!):
      #     https://stackoverflow.com/questions/72945407/how-do-i-import-and-run-a-multi-platform-oci-image-in-docker-for-macos/73058421#73058421
      #
      # So we have to use the matrix to build multiple platforms,
      # and even then, we can't seem to docker image load any format
      # created by docker buildx build, so we have to do docker image save.
      #
      - id: build-container-image
        name: Build utf8lex container for building and testing
        if: steps.container-image-cache-restore.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{env.BUILD_DIR}}/
          docker buildx build \
              --file build.Dockerfile \
              --load \
              --platform=${{matrix.platform}} \
              --tag ${{env.BUILDER_IMAGE_BASE}}:${{ hashFiles('build.Dockerfile') }} \
              .
          docker image save \
              --output ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar \
              ${{env.BUILDER_IMAGE_BASE}}:${{ hashFiles('build.Dockerfile') }}

      - id: gzip-builder-container-image
        name: Gzip utf8lex builder container image
        if: steps.container-image-cache-restore.outputs.cache-hit != 'true'
        run: |
          gzip ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar

      #
      # Do not use actions/cache/save, it doesn't work.
      # Using actions/cache up above adds automagic.
      # We just copy the builder container image to where the
      # cache automagic expects to find it, in /tmp.
      #
      - id: container-image-cache-save
        name: Cache the built container image
        if: steps.container-image-cache-restore.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/builder/
          rm -rf /tmp/builder/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz
          cp ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz \
              /tmp/builder/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz

      #
      # https://github.com/actions/upload-artifact
      #
      - id: upload-container-image
        name: Upload the container image
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz
          path: /tmp/builder/
          if-no-files-found: error
          retention-days: 1
  # --------------------------------------------------------------------

  # ====================================================================
  build:
    needs:
      - builder_container_image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/mips64le
          - linux/ppc64le
          - linux/s390x
    env:
      BUILD_DIR: ./build
      BUILDER_IMAGE_BASE: "utf8lex-builder"
      SHARED_LIBRARY: "libutf8lex.so.${{github.ref_name}}"
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: matrix-platform-env
        name: Set a non-slashy MATRIX_PLATFORM environment variable
        run: |
          echo "MATRIX_PLATFORM=${{matrix.platform}}" \
              | sed 's|/|\.|g' \
              > $GITHUB_ENV

      - id: download-container-image
        name: Download container image
        uses: actions/download-artifact@v4
        with:
          name: ${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz
          path: /tmp/builder/

      - id: copy-container-image
        name: Copy container image to build directory
        run: |
          mkdir -p ${{env.BUILD_DIR}}/
          cp /tmp/builder/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz \
              ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz
          gunzip ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz

      # Add support for more platforms with QEMU
      # https://github.com/docker/setup-qemu-action
      - id: qemu-setup
        name: qemu for multi-platform docker run support
        uses: docker/setup-qemu-action@v3

      - id: build-utf8lex
        name: Build utf8lex (libraries, executables, ...)
        run: |
          sudo systemctl start docker
          docker image load \
              --input ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar
          rm ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar
          chmod -R a+w ${{env.BUILD_DIR}}
          #
          # docker run documentation:
          #     https://docs.docker.com/reference/cli/docker/container/run/
          #
          docker run \
                  --rm \
                  --platform ${{matrix.platform}} \
                  --volume `pwd`:/utf8lex:rw \
                  ${{env.BUILDER_IMAGE_BASE}}:${{ hashFiles('build.Dockerfile') }} \
                  make build \
                      BUILD_DIR=../${{env.BUILD_DIR}} \
                      UTF8LEX_LIBRARY_VERSION=${{github.ref_name}}

      - id: prepare-utf8lex-for-upload
        name: Prepare utf8lex (libraries, executables, ...) for artifact upload
        run: |
          mkdir -p /tmp/utf8lex/
          cp ${{env.BUILD_DIR}}/${{env.SHARED_LIBRARY}} \
              /tmp/utf8lex/${{env.SHARED_LIBRARY}}.${{env.MATRIX_PLATFORM}}

      - id: upload-utf8lex
        name: Upload utf8lex (libraries, executables, ...)
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.SHARED_LIBRARY}}.${{env.MATRIX_PLATFORM}}
          path: /tmp/utf8lex/
          if-no-files-found: error
          retention-days: 1
  # --------------------------------------------------------------------


  # ====================================================================
  unit_tests:
    needs:
      - builder_container_image
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/mips64le
          - linux/ppc64le
          - linux/s390x
    env:
      BUILD_DIR: ./build
      TEST_BUILD_DIR: ./tests/build
      BUILDER_IMAGE_BASE: "utf8lex-builder"
      SHARED_LIBRARY_BASE: "libutf8lex.so"
      SHARED_LIBRARY_VERSION: "${{github.ref_name}}"
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4

      - id: matrix-platform-env
        name: Set a non-slashy MATRIX_PLATFORM environment variable
        run: |
          echo "MATRIX_PLATFORM=${{matrix.platform}}" \
              | sed 's|/|\.|g' \
              >> $GITHUB_ENV

      - id: download-container-image
        name: Download container image
        uses: actions/download-artifact@v4
        with:
          name: ${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz
          path: /tmp/builder/

      - id: copy-container-image
        name: Copy container image to build directory
        run: |
          mkdir -p ${{env.BUILD_DIR}}/
          cp /tmp/builder/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz \
              ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz
          gunzip ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar.gz

      - id: utf8lex-library-env
        name: Set the full utf8lex library .so name
        run: |
            echo "SHARED_LIBRARY=${{env.SHARED_LIBRARY_BASE}}.${{env.SHARED_LIBRARY_VERSION}}" \
                >> $GITHUB_ENV

      - id: download-utf8lex
        name: Download utf8lex (libraries, executables, ...)
        uses: actions/download-artifact@v4
        with:
          name: ${{env.SHARED_LIBRARY}}.${{env.MATRIX_PLATFORM}}
          path: /tmp/utf8lex/

      - id: copy-utf8lex
        name: Copy utf8lex binaries to build directory
        run: |
          mkdir -p ${{env.BUILD_DIR}}/
          cp /tmp/utf8lex/${{env.SHARED_LIBRARY}}.${{env.MATRIX_PLATFORM}} \
              ${{env.BUILD_DIR}}/${{env.SHARED_LIBRARY}}
          ln -s ${{env.BUILD_DIR}}/${{env.SHARED_LIBRARY}} \
              ${{env.BUILD_DIR}}/${{env.SHARED_LIBRARY_BASE}}
          MAJOR=`echo "${{env.SHARED_LIBRARY_VERSION}}" | sed 's|^\([^\.]*\)\..*$|\1|'`
          if test "$MAJOR" != "${{env.SHARED_LIBRARY_VERSION}}"; \
          then \
              ln -s ${{env.BUILD_DIR}}/${{env.SHARED_LIBRARY}} \
                  ${{env.BUILD_DIR}}/${{env.SHARED_LIBRARY_BASE}}.$MAJOR ; \
          fi

      # Add support for more platforms with QEMU
      # https://github.com/docker/setup-qemu-action
      - id: qemu-setup
        name: qemu for multi-platform docker run support
        uses: docker/setup-qemu-action@v3

      - id: run-unit-tests
        name: Run unit tests
        run: |
          sudo systemctl start docker
          docker image load \
              --input ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar
          rm ${{env.BUILD_DIR}}/${{env.BUILDER_IMAGE_BASE}}.${{env.MATRIX_PLATFORM}}.${{ hashFiles('build.Dockerfile') }}.tar
          chmod -R a+w ${{env.BUILD_DIR}}
          mkdir -p ${{env.TEST_BUILD_DIR}}/
          chmod -R a+w ${{env.TEST_BUILD_DIR}}
          #
          # docker run documentation:
          #     https://docs.docker.com/reference/cli/docker/container/run/
          #
          docker run \
                  --rm \
                  --platform ${{matrix.platform}} \
                  --volume `pwd`:/utf8lex:rw \
                  ${{env.BUILDER_IMAGE_BASE}}:${{ hashFiles('build.Dockerfile') }} \
                  make unit_tests \
                      BUILD_DIR=../../${{env.BUILD_DIR}} \
                      UTF8LEX_LIBRARY_VERSION=${{github.ref_name}} \
                      TEST_BUILD_DIR=../../${{env.TEST_BUILD_DIR}}
  # --------------------------------------------------------------------

#
# Integration test (on push)
# - Compile and link integration test programs
# - Run integration tests
#
# TODO

#
# Release (on push tag)
# - Upload .so library, program to GitHub packages
# - Create a GitHub Release
#
# TODO
