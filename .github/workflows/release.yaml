#
# utf8lex
# Copyright Â© 2023-2025 Johann Tienhaara
# All rights reserved
#
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Utf8lex Release

permissions:
  contents: write
  packages: read

#
# Release (on tag semantic versioning style v1.2.3):
# - Download .a libraries from GitHub Packages.
# - Rename each .sha.a library .<version>.a
# - Extract the object files into ./build/libutf8lex, and build new .so files
#   and executables
# - Commit to the dist/ directory under the appropriate architecture (i386 etc).
#
on:
  push:
    tags:
      - v*


#
# See build.yaml for platforms matrix documentation.
#

jobs:
  # ====================================================================
  release:
    runs-on: ubuntu-latest

    env:
      BUILD_DIR: build
      DEBIAN_IMAGE_BASE: "utf8lex-debian"
      UTF8LEX_DOWNLOAD_VERSION: "${{github.sha}}"
      UTF8LEX_RELEASE_TAG: "${{github.ref_name}}"  # git tag v1.2.3
      LIBRARY_DYNAMIC_BASE: "libutf8lex.so"
      LIBRARY_STATIC_BASE: "libutf8lex.a"
      PROGRAM_BASE: "utf8lex"

    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v4
        #
        # Checkout the main branch, not the tag, in case other
        # GitHub Actions have committed since git tag.
        #
        # https://github.com/actions/checkout
        #
        with:
          # repository: ${{ github.repository }}

          ref: 'main'

          # token: ${{ github.token }}
          # ssh-key: (default)
          # ssh-known-hosts: `ssh-keyscan github.com`
          # ssh-strict: true
          # ssh-user: git
          # persist-credentials: true
          # path: $GITHUB_WORKSPACE
          # clean: true
          # filter: null
          # sparse-checkout: null
          # sparse-checkout-cone-mode: true
          # fetch-depth: 1
          # fetch-tags: false
          # show-progress: true
          # lfs: false
          # submodules: false (true/recursive)
          # set-safe-directory: true
          # github-server-url: 'https://github.com'

      - id: utf8lex-version-env
        name: Set the full utf8lex library and program names, with version
        run: |
            UTF8LEX_RELEASE_VERSION=`echo "${{env.UTF8LEX_RELEASE_TAG}}" \
                                         | sed 's|^v||'`
            echo "UTF8LEX_RELEASE_VERSION=$UTF8LEX_RELEASE_VERSION" \
                >> $GITHUB_ENV
            DEBIAN_IMAGE_DOWNLOAD="${{env.DEBIAN_IMAGE_BASE}}.${{env.UTF8LEX_DOWNLOAD_VERSION}}"
            echo "DEBIAN_IMAGE_DOWNLOAD=$DEBIAN_IMAGE_DOWNLOAD" \
                >> $GITHUB_ENV
            DEBIAN_IMAGE_RELEASE="${{env.DEBIAN_IMAGE_BASE}}.$UTF8LEX_RELEASE_VERSION"
            echo "DEBIAN_IMAGE_RELEASE=$LIBRARY_STATIC_RELEASE" \
                >> $GITHUB_ENV
            LIBRARY_STATIC_DOWNLOAD="${{env.LIBRARY_STATIC_BASE}}.${{env.UTF8LEX_DOWNLOAD_VERSION}}"
            echo "LIBRARY_STATIC_DOWNLOAD=$LIBRARY_STATIC_DOWNLOAD" \
                >> $GITHUB_ENV
            LIBRARY_STATIC_RELEASE="${{env.LIBRARY_STATIC_BASE}}.$UTF8LEX_RELEASE_VERSION"
            echo "LIBRARY_STATIC_RELEASE=$LIBRARY_STATIC_RELEASE" \
                >> $GITHUB_ENV
            PROGRAM_DOWNLOAD="${{env.PROGRAM_BASE}}.${{env.UTF8LEX_DOWNLOAD_VERSION}}"
            echo "PROGRAM_DOWNLOAD=$PROGRAM_DOWNLOAD" \
                >> $GITHUB_ENV
            PROGRAM_RELEASE="${{env.PROGRAM_BASE}}.$UTF8LEX_RELEASE_VERSION"
            echo "PROGRAM_RELEASE=$PROGRAM_RELEASE" \
                >> $GITHUB_ENV
            echo "UTF8LEX_RELEASE_VERSION=$UTF8LEX_RELEASE_VERSION"
            echo "LIBRARY_STATIC_DOWNLOAD=$LIBRARY_STATIC_DOWNLOAD"
            echo "LIBRARY_STATIC_RELEASE=$LIBRARY_STATIC_RELEASE"
            echo "PROGRAM_DOWNLOAD=$PROGRAM_DOWNLOAD"
            echo "PROGRAM_RELEASE=$PROGRAM_RELEASE"

      #
      # Extract release notes from the CHANGELOG.md:
      # https://github.com/release-flow/keep-a-changelog-action/blob/main/docs/query.md
      #
      # The CHANGELOG.md must already have been updated to contain
      # the version number (e.g. if "git tag v1.2.3", then "1.2.3"
      # must be included in CHANGELOG.md).
      #
      - name: release-notes
        id: query-release-info
        uses: release-flow/keep-a-changelog-action@v2
        with:
          command: query
          version: ${{env.UTF8LEX_RELEASE_VERSION}}
          changelog: ./CHANGELOG.md

      - name: generate-release-notes
        run: |
          rm -rf /tmp/release_notes.md
          echo "# ${{env.UTF8LEX_RELEASE_VERSION}}" \
              >> /tmp/release_notes.md
          echo "Date: {{ steps.query-release-info.outputs.release-date }}" \
              >> /tmp/release_notes.md
          echo "${{ steps.query-release-info.outputs.release-notes }}" \
              >> /tmp/release_notes.md
          cat /tmp/release_notes.md

      - name: release-type
        run: |
          echo "Is ${{env.UTF8LEX_RELEASE_VERSION}} a pre-release?"
          MAYBE_PRERELEASE=`echo "${{env.UTF8LEX_RELEASE_VERSION}}" \
                                | sed 's|^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$||'`
          if test -z "$MAYBE_PRERELEASE"
          then
              echo "Full release."
              IS_PRERELEASE=false
              IS_LATEST=true
          else
              echo "Pre-release."
              IS_PRERELEASE=true
              IS_LATEST=false
          fi
          echo IS_PRERELEASE=$IS_PRERELEASE \
              >> $GITHUB_ENV
          echo "IS_PRERELEASE=$IS_PRERELEASE"
          echo IS_LATEST=$IS_LATEST \
              >> $GITHUB_ENV
          echo "IS_LATEST=$IS_LATEST"

      - id: download-all_artifacts
        name: Download utf8lex libraries and programs for all architectures
        # Need a special Action to download artifacts from another workflow:
        # https://github.com/marketplace/actions/download-workflow-artifact
        uses: dawidd6/action-download-artifact@v11
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: build.yaml
          workflow_search: false
          workflow_conclusion: success
          # pr: (use commit)
          commit: ${{env.UTF8LEX_DOWNLOAD_VERSION}}
          # branch: (use commit)
          # ref: (use commit)
          # run_id: (use commit)
          # run_number: (no specific workflow run number)
          # event: (defaults to all event types, e.g. push, etc)
          # name: (all artifacts)
          # name_is_regexp: false
          path: /tmp/utf8lex/
          # repo: (current repo)
          check_artifacts: false
          search_artifacts: false
          skip_unpack: false
          if_no_artifact_found: fail
          allow_forks: false
          use_unzip: false
          merge_multiple: false

      # Add support for more platforms with QEMU
      # https://github.com/docker/setup-qemu-action
      - id: qemu-setup
        name: qemu for multi-platform docker support
        if: steps.container-image-cache-restore.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3

      - id: re-version
        name: Extract from .a static library, re-version .so dynamic library
        run: |
          echo "utf8lex binaries downloaded from GitHub Packages:"
          find /tmp/utf8lex/ -type f
          sudo systemctl start docker
          for MATRIX_PLATFORM in \
              linux/386 \
              linux/amd64 \
              linux/arm/v7 \
              linux/arm64 \
              linux/mips64le \
              linux/ppc64le \
              linux/s390x
          do
              echo "MATRIX_PLATFORM=$MATRIX_PLATFORM"
              DEBIAN_ARCHITECTURE=`./get_debian_architecture.sh "$MATRIX_PLATFORM"`
              echo "DEBIAN_ARCHITECTURE=$DEBIAN_ARCHITECTURE"
              rm -rf ${{env.BUILD_DIR}}
              mkdir -p ${{env.BUILD_DIR}}
              chmod -R a+w ${{env.BUILD_DIR}}

              echo "Loading Docker buider image"
              cp -i /tmp/utf8lex/utf8lex-debian.$DEBIAN_ARCHITECTURE.*.tar.gz/utf8lex-debian.$DEBIAN_ARCHITECTURE.*.tar.gz \
                  ${{env.BUILD_DIR}}/${{env.DEBIAN_IMAGE_BASE}}.$DEBIAN_ARCHITECTURE.${{env.UTF8LEX_RELEASE_VERSION}}.tar.gz
              gunzip ${{env.BUILD_DIR}}/${{env.DEBIAN_IMAGE_BASE}}.$DEBIAN_ARCHITECTURE.${{env.UTF8LEX_RELEASE_VERSION}}.tar.gz
              DEBIAN_IMAGE=`docker image load \
                                --input ${{env.BUILD_DIR}}/${{env.DEBIAN_IMAGE_BASE}}.$DEBIAN_ARCHITECTURE.${{env.UTF8LEX_RELEASE_VERSION}}.tar \
                                | grep 'Loaded image:' \
                                | tail -1 \
                                | awk '{ print $NF; }'`
              if test -z "$DEBIAN_IMAGE"
              then
                  echo "ERROR Failed to load Debian builder image ${{env.BUILD_DIR}}/${{env.DEBIAN_IMAGE_BASE}}.$DEBIAN_ARCHITECTURE.${{env.UTF8LEX_RELEASE_VERSION}}.tar: could not determine image tag" >&2
                  exit 1
              fi
              rm ${{env.BUILD_DIR}}/${{env.DEBIAN_IMAGE_BASE}}.$DEBIAN_ARCHITECTURE.${{env.UTF8LEX_RELEASE_VERSION}}.tar

              echo "Copying .a into place"
              cp /tmp/utf8lex/${{env.LIBRARY_STATIC_DOWNLOAD}}.$DEBIAN_ARCHITECTURE/${{env.LIBRARY_STATIC_DOWNLOAD}}.$DEBIAN_ARCHITECTURE \
                  ${{env.BUILD_DIR}}/${{env.LIBRARY_STATIC_RELEASE}}

              echo "Running make re-version UTF8LEX_VERSION=${{env.UTF8LEX_RELEASE_VERSION}}"
              #
              # docker run documentation:
              #     https://docs.docker.com/reference/cli/docker/container/run/
              #
              docker run \
                      --rm \
                      --platform "${{matrix.platform}}" \
                      --volume `pwd`:/utf8lex:rw \
                      "$DEBIAN_IMAGE" \
                      make re-version \
                          BUILD_DIR=../${{env.BUILD_DIR}} \
                          UTF8LEX_VERSION=${{env.UTF8LEX_RELEASE_VERSION}}
          done

          echo "Removing container images from /tmp/utf8lex"
          rm -rf /tmp/utf8lex/${{env.DEBIAN_IMAGE_BASE}}.$DEBIAN_ARCHITECTURE.*.tar.gz

      - id: prepare-utf8lex-for-upload
        name: Prepare utf8lex (libraries, executables, ...) for release upload
        run: |
          echo "Preparing utf8lex assets for release"
          # Start with a clean /tmp/utf8lex directory:
          rm -rf /tmp/utf8lex/
          mkdir -p /tmp/utf8lex/

          echo "Copying libraries and programs for release"
          for MATRIX_PLATFORM in \
              linux/386 \
              linux/amd64 \
              linux/arm/v7 \
              linux/arm64 \
              linux/mips64le \
              linux/ppc64le \
              linux/s390x
          do
              echo "MATRIX_PLATFORM=$MATRIX_PLATFORM"
              DEBIAN_ARCHITECTURE=`./get_debian_architecture.sh "$MATRIX_PLATFORM"`
              echo "DEBIAN_ARCHITECTURE=$DEBIAN_ARCHITECTURE"
              cp ${{env.BUILD_DIR}}/${{env.LIBRARY_DYNAMIC}} \
                  /tmp/utf8lex/${{env.LIBRARY_DYNAMIC}}.$DEBIAN_ARCHITECTURE
              cp ${{env.BUILD_DIR}}/${{env.LIBRARY_STATIC}} \
                  /tmp/utf8lex/${{env.LIBRARY_STATIC}}.$DEBIAN_ARCHITECTURE
              cp ${{env.BUILD_DIR}}/${{env.PROGRAM}} \
                  /tmp/utf8lex/${{env.PROGRAM}}.$DEBIAN_ARCHITECTURE
          done

          echo "Removing all gitignore directories"
          for DIR in `cat .gitignore | sed 's| [ ]*#.*$||' | grep -v '^$'`
          do
              rm -rf "$DIR"
          done

          echo "Copying utf8lex.h for release"
          cp src/utf8lex.h /tmp/utf8lex/

          echo "Bundling up templates for release"
          cd ..
          tar czf /tmp/utf8lex/utf8lex-templates-${{env.UTF8LEX_RELEASE_VERSION}}.tar.gz \
              --exclude Makefile \
              utf8lex/templates/
          zip /tmp/utf8lex/utf8lex-templates-${{env.UTF8LEX_RELEASE_VERSION}}.zip \
              --exclude Makefile \
              utf8lex
          cd utf8lex

          echo "Bundling up source for release"
          cd ..
          tar czf /tmp/utf8lex/utf8lex-${{env.UTF8LEX_RELEASE_VERSION}}.tar.gz \
              utf8lex
          zip /tmp/utf8lex/utf8lex-${{env.UTF8LEX_RELEASE_VERSION}}.zip \
              utf8lex
          cd utf8lex

      #
      # https://github.com/softprops/action-gh-release
      #
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: /tmp/release_notes.md
          draft: false
          prerelease: ${{env.IS_PRERELEASE}}
          preserve_order: true
          files: |
            README.md
            LICENSE
            CHANGELOG.md
            /tmp/utf8lex/*
          overwrite_files: true
          name: ${{env.UTF8LEX_RELEASE_TAG}}
          tag_name: ${{env.UTF8LEX_RELEASE_TAG}}
          fail_on_unmatched_files: true
          # repository	String	Name of a target repository in <owner>/<repo> format. Defaults to GITHUB_REPOSITORY env variable
          target_commitish: ${{env.UTF8LEX_DOWNLOAD_VERSION}}
          # token	String	Secret GitHub Personal Access Token. Defaults to ${{ github.token }}
          # discussion_category_name	String	If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "Managing categories for discussions in your repository."
          generate_release_notes: false
          append_body: false
          make_latest: ${{env.IS_LATEST}}
  # --------------------------------------------------------------------
